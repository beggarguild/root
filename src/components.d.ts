/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface HeadlessAccordion {
    }
    interface HeadlessAlert {
    }
    interface HeadlessAlertDialog {
    }
    interface HeadlessBanner {
    }
    interface HeadlessBreadcrumb {
    }
    interface HeadlessButton {
    }
    interface HeadlessCarousel {
    }
    interface HeadlessCheckbox {
    }
    interface HeadlessCombobox {
    }
    interface HeadlessComplementary {
    }
    interface HeadlessContentinfo {
    }
    interface HeadlessDialog {
    }
    interface HeadlessDisclosure {
    }
    interface HeadlessFeed {
    }
    interface HeadlessForm {
    }
    interface HeadlessGrids {
    }
    interface HeadlessLink {
    }
    interface HeadlessListbox {
    }
    interface HeadlessMain {
    }
    interface HeadlessMenu {
    }
    interface HeadlessMenuButton {
    }
    interface HeadlessMeter {
    }
    interface HeadlessNavigation {
    }
    interface HeadlessRadioGroup {
    }
    interface HeadlessRegion {
    }
    interface HeadlessSearch {
    }
    interface HeadlessSlider {
    }
    interface HeadlessSliderMulti {
    }
    interface HeadlessSpinbutton {
    }
    interface HeadlessTable {
    }
    interface HeadlessTabs {
    }
    interface HeadlessToolbar {
    }
    interface HeadlessTooltip {
    }
    interface HeadlessTreeView {
    }
    interface HeadlessTreegrid {
    }
    interface HeadlessWindowSplitter {
    }
    interface RootButton {
    }
    interface ThemeProvider {
    }
}
declare global {
    interface HTMLHeadlessAccordionElement extends Components.HeadlessAccordion, HTMLStencilElement {
    }
    var HTMLHeadlessAccordionElement: {
        prototype: HTMLHeadlessAccordionElement;
        new (): HTMLHeadlessAccordionElement;
    };
    interface HTMLHeadlessAlertElement extends Components.HeadlessAlert, HTMLStencilElement {
    }
    var HTMLHeadlessAlertElement: {
        prototype: HTMLHeadlessAlertElement;
        new (): HTMLHeadlessAlertElement;
    };
    interface HTMLHeadlessAlertDialogElement extends Components.HeadlessAlertDialog, HTMLStencilElement {
    }
    var HTMLHeadlessAlertDialogElement: {
        prototype: HTMLHeadlessAlertDialogElement;
        new (): HTMLHeadlessAlertDialogElement;
    };
    interface HTMLHeadlessBannerElement extends Components.HeadlessBanner, HTMLStencilElement {
    }
    var HTMLHeadlessBannerElement: {
        prototype: HTMLHeadlessBannerElement;
        new (): HTMLHeadlessBannerElement;
    };
    interface HTMLHeadlessBreadcrumbElement extends Components.HeadlessBreadcrumb, HTMLStencilElement {
    }
    var HTMLHeadlessBreadcrumbElement: {
        prototype: HTMLHeadlessBreadcrumbElement;
        new (): HTMLHeadlessBreadcrumbElement;
    };
    interface HTMLHeadlessButtonElement extends Components.HeadlessButton, HTMLStencilElement {
    }
    var HTMLHeadlessButtonElement: {
        prototype: HTMLHeadlessButtonElement;
        new (): HTMLHeadlessButtonElement;
    };
    interface HTMLHeadlessCarouselElement extends Components.HeadlessCarousel, HTMLStencilElement {
    }
    var HTMLHeadlessCarouselElement: {
        prototype: HTMLHeadlessCarouselElement;
        new (): HTMLHeadlessCarouselElement;
    };
    interface HTMLHeadlessCheckboxElement extends Components.HeadlessCheckbox, HTMLStencilElement {
    }
    var HTMLHeadlessCheckboxElement: {
        prototype: HTMLHeadlessCheckboxElement;
        new (): HTMLHeadlessCheckboxElement;
    };
    interface HTMLHeadlessComboboxElement extends Components.HeadlessCombobox, HTMLStencilElement {
    }
    var HTMLHeadlessComboboxElement: {
        prototype: HTMLHeadlessComboboxElement;
        new (): HTMLHeadlessComboboxElement;
    };
    interface HTMLHeadlessComplementaryElement extends Components.HeadlessComplementary, HTMLStencilElement {
    }
    var HTMLHeadlessComplementaryElement: {
        prototype: HTMLHeadlessComplementaryElement;
        new (): HTMLHeadlessComplementaryElement;
    };
    interface HTMLHeadlessContentinfoElement extends Components.HeadlessContentinfo, HTMLStencilElement {
    }
    var HTMLHeadlessContentinfoElement: {
        prototype: HTMLHeadlessContentinfoElement;
        new (): HTMLHeadlessContentinfoElement;
    };
    interface HTMLHeadlessDialogElement extends Components.HeadlessDialog, HTMLStencilElement {
    }
    var HTMLHeadlessDialogElement: {
        prototype: HTMLHeadlessDialogElement;
        new (): HTMLHeadlessDialogElement;
    };
    interface HTMLHeadlessDisclosureElement extends Components.HeadlessDisclosure, HTMLStencilElement {
    }
    var HTMLHeadlessDisclosureElement: {
        prototype: HTMLHeadlessDisclosureElement;
        new (): HTMLHeadlessDisclosureElement;
    };
    interface HTMLHeadlessFeedElement extends Components.HeadlessFeed, HTMLStencilElement {
    }
    var HTMLHeadlessFeedElement: {
        prototype: HTMLHeadlessFeedElement;
        new (): HTMLHeadlessFeedElement;
    };
    interface HTMLHeadlessFormElement extends Components.HeadlessForm, HTMLStencilElement {
    }
    var HTMLHeadlessFormElement: {
        prototype: HTMLHeadlessFormElement;
        new (): HTMLHeadlessFormElement;
    };
    interface HTMLHeadlessGridsElement extends Components.HeadlessGrids, HTMLStencilElement {
    }
    var HTMLHeadlessGridsElement: {
        prototype: HTMLHeadlessGridsElement;
        new (): HTMLHeadlessGridsElement;
    };
    interface HTMLHeadlessLinkElement extends Components.HeadlessLink, HTMLStencilElement {
    }
    var HTMLHeadlessLinkElement: {
        prototype: HTMLHeadlessLinkElement;
        new (): HTMLHeadlessLinkElement;
    };
    interface HTMLHeadlessListboxElement extends Components.HeadlessListbox, HTMLStencilElement {
    }
    var HTMLHeadlessListboxElement: {
        prototype: HTMLHeadlessListboxElement;
        new (): HTMLHeadlessListboxElement;
    };
    interface HTMLHeadlessMainElement extends Components.HeadlessMain, HTMLStencilElement {
    }
    var HTMLHeadlessMainElement: {
        prototype: HTMLHeadlessMainElement;
        new (): HTMLHeadlessMainElement;
    };
    interface HTMLHeadlessMenuElement extends Components.HeadlessMenu, HTMLStencilElement {
    }
    var HTMLHeadlessMenuElement: {
        prototype: HTMLHeadlessMenuElement;
        new (): HTMLHeadlessMenuElement;
    };
    interface HTMLHeadlessMenuButtonElement extends Components.HeadlessMenuButton, HTMLStencilElement {
    }
    var HTMLHeadlessMenuButtonElement: {
        prototype: HTMLHeadlessMenuButtonElement;
        new (): HTMLHeadlessMenuButtonElement;
    };
    interface HTMLHeadlessMeterElement extends Components.HeadlessMeter, HTMLStencilElement {
    }
    var HTMLHeadlessMeterElement: {
        prototype: HTMLHeadlessMeterElement;
        new (): HTMLHeadlessMeterElement;
    };
    interface HTMLHeadlessNavigationElement extends Components.HeadlessNavigation, HTMLStencilElement {
    }
    var HTMLHeadlessNavigationElement: {
        prototype: HTMLHeadlessNavigationElement;
        new (): HTMLHeadlessNavigationElement;
    };
    interface HTMLHeadlessRadioGroupElement extends Components.HeadlessRadioGroup, HTMLStencilElement {
    }
    var HTMLHeadlessRadioGroupElement: {
        prototype: HTMLHeadlessRadioGroupElement;
        new (): HTMLHeadlessRadioGroupElement;
    };
    interface HTMLHeadlessRegionElement extends Components.HeadlessRegion, HTMLStencilElement {
    }
    var HTMLHeadlessRegionElement: {
        prototype: HTMLHeadlessRegionElement;
        new (): HTMLHeadlessRegionElement;
    };
    interface HTMLHeadlessSearchElement extends Components.HeadlessSearch, HTMLStencilElement {
    }
    var HTMLHeadlessSearchElement: {
        prototype: HTMLHeadlessSearchElement;
        new (): HTMLHeadlessSearchElement;
    };
    interface HTMLHeadlessSliderElement extends Components.HeadlessSlider, HTMLStencilElement {
    }
    var HTMLHeadlessSliderElement: {
        prototype: HTMLHeadlessSliderElement;
        new (): HTMLHeadlessSliderElement;
    };
    interface HTMLHeadlessSliderMultiElement extends Components.HeadlessSliderMulti, HTMLStencilElement {
    }
    var HTMLHeadlessSliderMultiElement: {
        prototype: HTMLHeadlessSliderMultiElement;
        new (): HTMLHeadlessSliderMultiElement;
    };
    interface HTMLHeadlessSpinbuttonElement extends Components.HeadlessSpinbutton, HTMLStencilElement {
    }
    var HTMLHeadlessSpinbuttonElement: {
        prototype: HTMLHeadlessSpinbuttonElement;
        new (): HTMLHeadlessSpinbuttonElement;
    };
    interface HTMLHeadlessTableElement extends Components.HeadlessTable, HTMLStencilElement {
    }
    var HTMLHeadlessTableElement: {
        prototype: HTMLHeadlessTableElement;
        new (): HTMLHeadlessTableElement;
    };
    interface HTMLHeadlessTabsElement extends Components.HeadlessTabs, HTMLStencilElement {
    }
    var HTMLHeadlessTabsElement: {
        prototype: HTMLHeadlessTabsElement;
        new (): HTMLHeadlessTabsElement;
    };
    interface HTMLHeadlessToolbarElement extends Components.HeadlessToolbar, HTMLStencilElement {
    }
    var HTMLHeadlessToolbarElement: {
        prototype: HTMLHeadlessToolbarElement;
        new (): HTMLHeadlessToolbarElement;
    };
    interface HTMLHeadlessTooltipElement extends Components.HeadlessTooltip, HTMLStencilElement {
    }
    var HTMLHeadlessTooltipElement: {
        prototype: HTMLHeadlessTooltipElement;
        new (): HTMLHeadlessTooltipElement;
    };
    interface HTMLHeadlessTreeViewElement extends Components.HeadlessTreeView, HTMLStencilElement {
    }
    var HTMLHeadlessTreeViewElement: {
        prototype: HTMLHeadlessTreeViewElement;
        new (): HTMLHeadlessTreeViewElement;
    };
    interface HTMLHeadlessTreegridElement extends Components.HeadlessTreegrid, HTMLStencilElement {
    }
    var HTMLHeadlessTreegridElement: {
        prototype: HTMLHeadlessTreegridElement;
        new (): HTMLHeadlessTreegridElement;
    };
    interface HTMLHeadlessWindowSplitterElement extends Components.HeadlessWindowSplitter, HTMLStencilElement {
    }
    var HTMLHeadlessWindowSplitterElement: {
        prototype: HTMLHeadlessWindowSplitterElement;
        new (): HTMLHeadlessWindowSplitterElement;
    };
    interface HTMLRootButtonElement extends Components.RootButton, HTMLStencilElement {
    }
    var HTMLRootButtonElement: {
        prototype: HTMLRootButtonElement;
        new (): HTMLRootButtonElement;
    };
    interface HTMLThemeProviderElement extends Components.ThemeProvider, HTMLStencilElement {
    }
    var HTMLThemeProviderElement: {
        prototype: HTMLThemeProviderElement;
        new (): HTMLThemeProviderElement;
    };
    interface HTMLElementTagNameMap {
        "headless-accordion": HTMLHeadlessAccordionElement;
        "headless-alert": HTMLHeadlessAlertElement;
        "headless-alert-dialog": HTMLHeadlessAlertDialogElement;
        "headless-banner": HTMLHeadlessBannerElement;
        "headless-breadcrumb": HTMLHeadlessBreadcrumbElement;
        "headless-button": HTMLHeadlessButtonElement;
        "headless-carousel": HTMLHeadlessCarouselElement;
        "headless-checkbox": HTMLHeadlessCheckboxElement;
        "headless-combobox": HTMLHeadlessComboboxElement;
        "headless-complementary": HTMLHeadlessComplementaryElement;
        "headless-contentinfo": HTMLHeadlessContentinfoElement;
        "headless-dialog": HTMLHeadlessDialogElement;
        "headless-disclosure": HTMLHeadlessDisclosureElement;
        "headless-feed": HTMLHeadlessFeedElement;
        "headless-form": HTMLHeadlessFormElement;
        "headless-grids": HTMLHeadlessGridsElement;
        "headless-link": HTMLHeadlessLinkElement;
        "headless-listbox": HTMLHeadlessListboxElement;
        "headless-main": HTMLHeadlessMainElement;
        "headless-menu": HTMLHeadlessMenuElement;
        "headless-menu-button": HTMLHeadlessMenuButtonElement;
        "headless-meter": HTMLHeadlessMeterElement;
        "headless-navigation": HTMLHeadlessNavigationElement;
        "headless-radio-group": HTMLHeadlessRadioGroupElement;
        "headless-region": HTMLHeadlessRegionElement;
        "headless-search": HTMLHeadlessSearchElement;
        "headless-slider": HTMLHeadlessSliderElement;
        "headless-slider-multi": HTMLHeadlessSliderMultiElement;
        "headless-spinbutton": HTMLHeadlessSpinbuttonElement;
        "headless-table": HTMLHeadlessTableElement;
        "headless-tabs": HTMLHeadlessTabsElement;
        "headless-toolbar": HTMLHeadlessToolbarElement;
        "headless-tooltip": HTMLHeadlessTooltipElement;
        "headless-tree-view": HTMLHeadlessTreeViewElement;
        "headless-treegrid": HTMLHeadlessTreegridElement;
        "headless-window-splitter": HTMLHeadlessWindowSplitterElement;
        "root-button": HTMLRootButtonElement;
        "theme-provider": HTMLThemeProviderElement;
    }
}
declare namespace LocalJSX {
    interface HeadlessAccordion {
    }
    interface HeadlessAlert {
    }
    interface HeadlessAlertDialog {
    }
    interface HeadlessBanner {
    }
    interface HeadlessBreadcrumb {
    }
    interface HeadlessButton {
    }
    interface HeadlessCarousel {
    }
    interface HeadlessCheckbox {
    }
    interface HeadlessCombobox {
    }
    interface HeadlessComplementary {
    }
    interface HeadlessContentinfo {
    }
    interface HeadlessDialog {
    }
    interface HeadlessDisclosure {
    }
    interface HeadlessFeed {
    }
    interface HeadlessForm {
    }
    interface HeadlessGrids {
    }
    interface HeadlessLink {
    }
    interface HeadlessListbox {
    }
    interface HeadlessMain {
    }
    interface HeadlessMenu {
    }
    interface HeadlessMenuButton {
    }
    interface HeadlessMeter {
    }
    interface HeadlessNavigation {
    }
    interface HeadlessRadioGroup {
    }
    interface HeadlessRegion {
    }
    interface HeadlessSearch {
    }
    interface HeadlessSlider {
    }
    interface HeadlessSliderMulti {
    }
    interface HeadlessSpinbutton {
    }
    interface HeadlessTable {
    }
    interface HeadlessTabs {
    }
    interface HeadlessToolbar {
    }
    interface HeadlessTooltip {
    }
    interface HeadlessTreeView {
    }
    interface HeadlessTreegrid {
    }
    interface HeadlessWindowSplitter {
    }
    interface RootButton {
    }
    interface ThemeProvider {
    }
    interface IntrinsicElements {
        "headless-accordion": HeadlessAccordion;
        "headless-alert": HeadlessAlert;
        "headless-alert-dialog": HeadlessAlertDialog;
        "headless-banner": HeadlessBanner;
        "headless-breadcrumb": HeadlessBreadcrumb;
        "headless-button": HeadlessButton;
        "headless-carousel": HeadlessCarousel;
        "headless-checkbox": HeadlessCheckbox;
        "headless-combobox": HeadlessCombobox;
        "headless-complementary": HeadlessComplementary;
        "headless-contentinfo": HeadlessContentinfo;
        "headless-dialog": HeadlessDialog;
        "headless-disclosure": HeadlessDisclosure;
        "headless-feed": HeadlessFeed;
        "headless-form": HeadlessForm;
        "headless-grids": HeadlessGrids;
        "headless-link": HeadlessLink;
        "headless-listbox": HeadlessListbox;
        "headless-main": HeadlessMain;
        "headless-menu": HeadlessMenu;
        "headless-menu-button": HeadlessMenuButton;
        "headless-meter": HeadlessMeter;
        "headless-navigation": HeadlessNavigation;
        "headless-radio-group": HeadlessRadioGroup;
        "headless-region": HeadlessRegion;
        "headless-search": HeadlessSearch;
        "headless-slider": HeadlessSlider;
        "headless-slider-multi": HeadlessSliderMulti;
        "headless-spinbutton": HeadlessSpinbutton;
        "headless-table": HeadlessTable;
        "headless-tabs": HeadlessTabs;
        "headless-toolbar": HeadlessToolbar;
        "headless-tooltip": HeadlessTooltip;
        "headless-tree-view": HeadlessTreeView;
        "headless-treegrid": HeadlessTreegrid;
        "headless-window-splitter": HeadlessWindowSplitter;
        "root-button": RootButton;
        "theme-provider": ThemeProvider;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "headless-accordion": LocalJSX.HeadlessAccordion & JSXBase.HTMLAttributes<HTMLHeadlessAccordionElement>;
            "headless-alert": LocalJSX.HeadlessAlert & JSXBase.HTMLAttributes<HTMLHeadlessAlertElement>;
            "headless-alert-dialog": LocalJSX.HeadlessAlertDialog & JSXBase.HTMLAttributes<HTMLHeadlessAlertDialogElement>;
            "headless-banner": LocalJSX.HeadlessBanner & JSXBase.HTMLAttributes<HTMLHeadlessBannerElement>;
            "headless-breadcrumb": LocalJSX.HeadlessBreadcrumb & JSXBase.HTMLAttributes<HTMLHeadlessBreadcrumbElement>;
            "headless-button": LocalJSX.HeadlessButton & JSXBase.HTMLAttributes<HTMLHeadlessButtonElement>;
            "headless-carousel": LocalJSX.HeadlessCarousel & JSXBase.HTMLAttributes<HTMLHeadlessCarouselElement>;
            "headless-checkbox": LocalJSX.HeadlessCheckbox & JSXBase.HTMLAttributes<HTMLHeadlessCheckboxElement>;
            "headless-combobox": LocalJSX.HeadlessCombobox & JSXBase.HTMLAttributes<HTMLHeadlessComboboxElement>;
            "headless-complementary": LocalJSX.HeadlessComplementary & JSXBase.HTMLAttributes<HTMLHeadlessComplementaryElement>;
            "headless-contentinfo": LocalJSX.HeadlessContentinfo & JSXBase.HTMLAttributes<HTMLHeadlessContentinfoElement>;
            "headless-dialog": LocalJSX.HeadlessDialog & JSXBase.HTMLAttributes<HTMLHeadlessDialogElement>;
            "headless-disclosure": LocalJSX.HeadlessDisclosure & JSXBase.HTMLAttributes<HTMLHeadlessDisclosureElement>;
            "headless-feed": LocalJSX.HeadlessFeed & JSXBase.HTMLAttributes<HTMLHeadlessFeedElement>;
            "headless-form": LocalJSX.HeadlessForm & JSXBase.HTMLAttributes<HTMLHeadlessFormElement>;
            "headless-grids": LocalJSX.HeadlessGrids & JSXBase.HTMLAttributes<HTMLHeadlessGridsElement>;
            "headless-link": LocalJSX.HeadlessLink & JSXBase.HTMLAttributes<HTMLHeadlessLinkElement>;
            "headless-listbox": LocalJSX.HeadlessListbox & JSXBase.HTMLAttributes<HTMLHeadlessListboxElement>;
            "headless-main": LocalJSX.HeadlessMain & JSXBase.HTMLAttributes<HTMLHeadlessMainElement>;
            "headless-menu": LocalJSX.HeadlessMenu & JSXBase.HTMLAttributes<HTMLHeadlessMenuElement>;
            "headless-menu-button": LocalJSX.HeadlessMenuButton & JSXBase.HTMLAttributes<HTMLHeadlessMenuButtonElement>;
            "headless-meter": LocalJSX.HeadlessMeter & JSXBase.HTMLAttributes<HTMLHeadlessMeterElement>;
            "headless-navigation": LocalJSX.HeadlessNavigation & JSXBase.HTMLAttributes<HTMLHeadlessNavigationElement>;
            "headless-radio-group": LocalJSX.HeadlessRadioGroup & JSXBase.HTMLAttributes<HTMLHeadlessRadioGroupElement>;
            "headless-region": LocalJSX.HeadlessRegion & JSXBase.HTMLAttributes<HTMLHeadlessRegionElement>;
            "headless-search": LocalJSX.HeadlessSearch & JSXBase.HTMLAttributes<HTMLHeadlessSearchElement>;
            "headless-slider": LocalJSX.HeadlessSlider & JSXBase.HTMLAttributes<HTMLHeadlessSliderElement>;
            "headless-slider-multi": LocalJSX.HeadlessSliderMulti & JSXBase.HTMLAttributes<HTMLHeadlessSliderMultiElement>;
            "headless-spinbutton": LocalJSX.HeadlessSpinbutton & JSXBase.HTMLAttributes<HTMLHeadlessSpinbuttonElement>;
            "headless-table": LocalJSX.HeadlessTable & JSXBase.HTMLAttributes<HTMLHeadlessTableElement>;
            "headless-tabs": LocalJSX.HeadlessTabs & JSXBase.HTMLAttributes<HTMLHeadlessTabsElement>;
            "headless-toolbar": LocalJSX.HeadlessToolbar & JSXBase.HTMLAttributes<HTMLHeadlessToolbarElement>;
            "headless-tooltip": LocalJSX.HeadlessTooltip & JSXBase.HTMLAttributes<HTMLHeadlessTooltipElement>;
            "headless-tree-view": LocalJSX.HeadlessTreeView & JSXBase.HTMLAttributes<HTMLHeadlessTreeViewElement>;
            "headless-treegrid": LocalJSX.HeadlessTreegrid & JSXBase.HTMLAttributes<HTMLHeadlessTreegridElement>;
            "headless-window-splitter": LocalJSX.HeadlessWindowSplitter & JSXBase.HTMLAttributes<HTMLHeadlessWindowSplitterElement>;
            "root-button": LocalJSX.RootButton & JSXBase.HTMLAttributes<HTMLRootButtonElement>;
            "theme-provider": LocalJSX.ThemeProvider & JSXBase.HTMLAttributes<HTMLThemeProviderElement>;
        }
    }
}
